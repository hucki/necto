generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model appSettings {
  id             Int      @id @default(autoincrement())
  calDays        String   @db.VarChar(255)
  calHoursStart  Int
  calHoursEnd    Int
  timescaleWidth Int
  companyId      Int
  tenantId       String   @db.Uuid
  createdAt      DateTime @db.Timestamptz(6)
  updatedAt      DateTime @db.Timestamptz(6)
  tenant         tenant   @relation(fields: [tenantId], references: [uuid], onDelete: Cascade)
}

model company {
  uuid       String   @id @db.Uuid
  name       String   @db.VarChar(255)
  tenantId   String   @db.Uuid
  validUntil DateTime @db.Timestamptz(6)
  createdAt  DateTime @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)
  tenant     tenant   @relation(fields: [tenantId], references: [uuid], onDelete: Cascade)
}

model building {
  uuid        String  @id @db.Uuid
  displayName String  @db.VarChar(64)
  description String? @db.VarChar(64)
  street      String? @db.VarChar(64)
  zip         String? @db.VarChar(10)
  city        String? @db.VarChar(64)
  tenantId    String  @db.Uuid
  tenant      tenant  @relation(fields: [tenantId], references: [uuid])
  rooms       room[]
}

model room {
  uuid        String   @id @db.Uuid
  displayName String   @db.VarChar(64)
  description String?  @db.VarChar(64)
  tenantId    String   @db.Uuid
  buildingId  String   @db.Uuid
  building    building @relation(fields: [buildingId], references: [uuid])
}

model employee {
  uuid         String         @id @db.Uuid
  firstName    String?        @db.VarChar(64)
  lastName     String?        @db.VarChar(64)
  street       String?        @db.VarChar(64)
  zip          String?        @db.VarChar(10)
  city         String?        @db.VarChar(64)
  birthday     DateTime?      @db.Timestamptz(6)
  validUntil   DateTime?      @db.Timestamptz(6)
  createdAt    DateTime       @db.Timestamptz(6)
  updatedAt    DateTime       @db.Timestamptz(6)
  companyId    String         @db.Uuid
  tenantId     String         @db.Uuid
  contract     contract[]     @relation("contracts_employeeIdToemployees")
  userSettings userSettings?  @relation("userSettings_employeeIdToemployees")
  contactData  contactData[]  @relation("contactData_referenceIdToemployees")
  teams        employeeTeam[]
}

model employeeTeam {
  teamId     String   @db.Uuid
  team       team     @relation(fields: [teamId], references: [uuid])
  employeeId String   @db.Uuid
  employee   employee @relation(fields: [employeeId], references: [uuid])
  tenantId   String   @db.Uuid

  @@unique([employeeId, teamId])
}

model team {
  uuid        String         @id @db.Uuid
  displayName String         @db.VarChar(64)
  description String?        @db.VarChar(64)
  tenantId    String         @db.Uuid
  companyId   String         @db.Uuid
  employees   employeeTeam[]
}

model contract {
  id                                        Int       @id @default(autoincrement())
  userId                                    String    @db.Uuid
  hoursPerWeek                              Int?
  appointmentsPerWeek                       Int?
  tenantId                                  String    @db.Uuid
  validUntil                                DateTime? @db.Timestamptz(6)
  createdAt                                 DateTime  @db.Timestamptz(6)
  updatedAt                                 DateTime  @db.Timestamptz(6)
  employeeId                                String?   @db.Uuid
  employees_contracts_employeeIdToemployees employee? @relation("contracts_employeeIdToemployees", fields: [employeeId], references: [uuid], onDelete: Cascade)
}

model event {
  uuid              String    @id @db.Uuid
  userId            Int?
  ressourceId       Int?
  title             String?   @db.VarChar
  type              String?   @db.VarChar
  isHomeVisit       Boolean?
  isAllDay          Boolean?
  isRecurring       Boolean?
  isCancelled       Boolean?
  isCancelledReason String?   @db.VarChar
  rrule             String?   @db.VarChar
  startTime         DateTime? @db.Timestamp(6)
  endTime           DateTime? @db.Timestamp(6)
  bgColor           String?   @db.VarChar
  createdAt         DateTime? @db.Timestamp(6)
  updatedAt         DateTime? @db.Timestamp(6)
  tenantId          String?   @db.VarChar
  roomId            Int?
}

model tenant {
  uuid        String        @id @db.Uuid
  name        String        @db.VarChar(255)
  description String?       @db.VarChar(255)
  validUntil  DateTime?     @db.Timestamptz(6)
  createdAt   DateTime      @db.Timestamptz(6)
  updatedAt   DateTime      @db.Timestamptz(6)
  appSettings appSettings[]
  companies   company[]
  buildings   building[]
}

model userSettings {
  id         Int       @id @default(autoincrement())
  userId     String    @db.Uuid
  employeeId String?   @db.Uuid@unique
  bgColor    String?   @db.VarChar(255)
  tenantId   String    @db.Uuid
  validUntil DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @db.Timestamptz(6)
  updatedAt  DateTime  @db.Timestamptz(6)
  user       user      @relation("userSettings_userIdTousers", fields: [userId], references: [uuid], onDelete: Cascade)
  employee   employee? @relation("userSettings_employeeIdToemployees", fields: [employeeId], references: [uuid])
}

model user {
  uuid                                    String            @id @db.Uuid
  firstName                               String?           @db.VarChar(64)
  lastName                                String?           @db.VarChar(64)
  tenantId                                String            @db.Uuid
  validUntil                              DateTime?         @db.Timestamptz(6)
  createdAt                               DateTime          @db.Timestamptz(6)
  updatedAt                               DateTime          @db.Timestamptz(6)
  a0Id                                    String            @db.VarChar
  userSettings_userSettings_userIdTousers userSettings[]    @relation("userSettings_userIdTousers")
  contactData                             contactData[]     @relation("contactData_referenceIdTousers")
  permissions                             userPermissions[]
}

model userPermissions {
  userId       String          @db.Uuid
  user         user            @relation(fields: [userId], references: [uuid])
  permissionId String          @db.Uuid
  permission   permissionLevel @relation(fields: [permissionId], references: [uuid])
  tenantId     String          @db.Uuid

  @@unique([userId, permissionId])
}

model permissionLevel {
  uuid        String            @id @db.Uuid
  displayName String            @db.VarChar(64)
  description String            @db.VarChar(255)
  tenantId    String            @db.Uuid
  users       userPermissions[]
}

model contactData {
  uuid       String    @id @db.Uuid
  userId     String?   @db.Uuid
  employeeId String?   @db.Uuid
  patientId  String?   @db.Uuid
  type       String    @db.VarChar(64)
  contact    String    @db.VarChar(255)
  createdAt  DateTime  @db.Timestamptz(6)
  updatedAt  DateTime  @db.Timestamptz(6)
  tenantId   String    @db.Uuid
  user       user?     @relation("contactData_referenceIdTousers", fields: [userId], references: [uuid])
  employee   employee? @relation("contactData_referenceIdToemployees", fields: [employeeId], references: [uuid])
  patient    patient?  @relation("contactData_referenceIdTopatient", fields: [patientId], references: [uuid])
}

model patient {
  uuid                String        @id @db.Uuid
  firstName           String?       @db.VarChar(64)
  lastName            String?       @db.VarChar(64)
  title               String?       @db.VarChar(64)
  gender              String?       @db.VarChar(10)
  street              String?       @db.VarChar(64)
  zip                 String?       @db.VarChar(10)
  city                String?       @db.VarChar(64)
  birthday            DateTime?     @db.Timestamptz(6)
  insurance           String?       @db.VarChar(64)
  insuranceNumber     String?       @db.VarChar(64)
  insuranceCardNumber String?       @db.VarChar(64)
  insuranceCardValid  String?       @db.VarChar(64)
  notices             String?       @db.VarChar(255)
  careFacility        String?       @db.VarChar(64)
  state               String?       @db.VarChar(64)
  isAddpayFreed       Boolean
  addPayFreedFrom     DateTime?     @db.Timestamptz(6)
  addPayFreedUntil    DateTime?     @db.Timestamptz(6)
  validUntil          DateTime?     @db.Timestamptz(6)
  createdAt           DateTime      @db.Timestamptz(6)
  updatedAt           DateTime      @db.Timestamptz(6)
  companyId           String        @db.Uuid
  tenantId            String        @db.Uuid
  contactData         contactData[] @relation("contactData_referenceIdTopatient")
}
