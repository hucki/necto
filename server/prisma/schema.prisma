generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model AppSettings {
  id             Int      @id @default(autoincrement())
  calDays        String   @db.VarChar(255)
  calHoursStart  Int
  calHoursEnd    Int
  timescaleWidth Int
  companyId      Int
  tenantId       String   @unique @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [uuid], onDelete: Cascade)

  @@map("appSettings")
}

model Company {
  uuid       String   @id @default(uuid()) @db.Uuid
  name       String   @db.VarChar(255)
  tenantId   String   @db.Uuid
  validUntil DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [uuid], onDelete: Cascade)

  @@map("companies")
}

model Building {
  uuid        String  @id @default(uuid()) @db.Uuid
  displayName String  @db.VarChar(64)
  description String? @db.VarChar(64)
  street      String? @db.VarChar(64)
  zip         String? @db.VarChar(10)
  city        String? @db.VarChar(64)
  tenantId    String  @db.Uuid
  tenant      Tenant  @relation(fields: [tenantId], references: [uuid])
  rooms       Room[]

  @@map("buildings")
}

model Room {
  uuid        String   @id @default(uuid()) @db.Uuid
  displayName String   @db.VarChar(64)
  description String?  @db.VarChar(64)
  tenantId    String   @db.Uuid
  buildingId  String   @db.Uuid
  building    Building @relation(fields: [buildingId], references: [uuid])

  @@map("rooms")
}

model Employee {
  uuid        String           @id @default(uuid()) @db.Uuid
  firstName   String?          @db.VarChar(64)
  lastName    String?          @db.VarChar(64)
  alias       String?          @db.VarChar(64)
  street      String?          @db.VarChar(64)
  zip         String?          @db.VarChar(10)
  city        String?          @db.VarChar(64)
  birthday    DateTime?        @db.Date
  validUntil  DateTime?        @db.Timestamptz(6)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  companyId   String           @db.Uuid
  tenantId    String           @db.Uuid
  contract    Contract[]       @relation("contracts_employeeIdToemployees")
  user        UserSettings?    @relation("userSettings_employeeIdToemployees")
  contactData ContactData[]    @relation("contactData_referenceIdToemployees")
  teams       EmployeeToTeam[]
  events      Event[]          @relation("event_referenceIdToEmployee")
  availability Availability[] @relation("availability_referenceIdToEmployee")

  @@map("employees")
}

model EmployeeToTeam {
  teamId     String   @db.Uuid
  team       Team     @relation(fields: [teamId], references: [uuid])
  employeeId String   @db.Uuid
  employee   Employee @relation(fields: [employeeId], references: [uuid])
  tenantId   String   @db.Uuid

  @@id([employeeId, teamId])
  @@map("employeeTeams")
}

model Team {
  uuid        String           @id @default(uuid()) @db.Uuid
  displayName String           @db.VarChar(64)
  description String?          @db.VarChar(64)
  tenantId    String           @db.Uuid
  companyId   String           @db.Uuid
  employees   EmployeeToTeam[]

  @@map("teams")
}

model Contract {
  id                  Int       @id @default(autoincrement())
  employeeId          String    @db.Uuid
  tenantId            String    @db.Uuid
  hoursPerWeek        Int?
  appointmentsPerWeek Int?
  bgColor             String?   @db.VarChar(64)
  validUntil          DateTime? @db.Timestamptz(6)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  employee            Employee? @relation("contracts_employeeIdToemployees", fields: [employeeId], references: [uuid], onDelete: Cascade)

  @@map("contracts")
}

// recurring Events
//
// parent
//  - isRecurring === true
//  - rrule === rrulestring
//  - parentEventId === undefined
//
// child
//  - isRecurring === true
//  - rrule === ''
//  - parentEventId === parentEventId
//
model Event {
  uuid                    String                   @id @default(uuid()) @db.Uuid
  userId                  String?                  @db.Uuid
  ressourceId             String?                  @db.Uuid
  title                   String?                  @db.VarChar
  type                    String?                  @db.VarChar
  isDiagnostic            Boolean                  @default(false)
  isHomeVisit             Boolean?
  isDone                  Boolean?                 @default(false)
  isDeleted               Boolean?                 @default(false)
  isAllDay                Boolean?
  isRecurring             Boolean?
  isCancelled             Boolean?
  cancellationReasonId    String?                  @db.VarChar(10)
  cancellationReason      CancellationReason?      @relation("event_referenceIdToCancellationReason", fields: [cancellationReasonId], references: [id])
  isCancelledReason       String?                  @db.VarChar // deprecated
  rrule                   String?                  @db.VarChar
  startTime               DateTime?                @db.Timestamp(6)
  endTime                 DateTime?                @db.Timestamp(6)
  bgColor                 String?                  @db.VarChar
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  tenantId                String?                  @db.Uuid
  patientId               String?                  @db.Uuid
  roomId                  String?                  @db.Uuid
  parentEventId           String?                  @db.Uuid
  parentEvent             Event?                   @relation("events_parentEventIdToEvents", fields: [parentEventId], references: [uuid])
  childEvents             Event[]                  @relation("events_parentEventIdToEvents")
  eventInstanceExceptions EventInstanceException[] @relation("eventInstanceExceptions_eventIdToEvents")
  patient                 Patient?                 @relation("event_referenceIdTopatient", fields: [patientId], references: [uuid])
  employee                Employee?                @relation("event_referenceIdToEmployee", fields: [ressourceId], references: [uuid])

  @@map("events")
}

model EventInstanceException {
  uuid          String    @id @default(uuid()) @db.Uuid
  eventId       String    @db.Uuid
  Event         Event?    @relation("eventInstanceExceptions_eventIdToEvents", fields: [eventId], references: [uuid])
  isRescheduled Boolean?
  isCancelled   Boolean?
  isAllDay      Boolean?
  startTime     DateTime? @db.Timestamp(6)
  endTime       DateTime? @db.Timestamp(6)
}

model Availability {
  uuid        String      @id @default(uuid()) @db.Uuid
  dayOfWeek   String?     @db.VarChar(20)
  startTime   DateTime?   @db.Timestamp(6)
  endTime     DateTime?   @db.Timestamp(6)
  patientId   String?     @db.Uuid
  patient     Patient?    @relation("availability_referenceIdToPatient", fields: [patientId], references: [uuid])
  employeeId  String?     @db.Uuid
  employee    Employee?   @relation("availability_referenceIdToEmployee", fields: [employeeId], references: [uuid])
}

model Tenant {
  uuid        String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar(255)
  description String?       @db.VarChar(255)
  validUntil  DateTime?     @db.Timestamptz(6)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appSettings AppSettings[]
  companies   Company[]
  buildings   Building[]

  @@map("tenants")
}

model UserSettings {
  id         Int       @id @default(autoincrement())
  userId     String    @db.Uuid
  employeeId String?   @unique @db.Uuid
  bgColor    String?   @db.VarChar(64)
  tenantId   String    @db.Uuid
  validUntil DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation("userSettings_userIdTousers", fields: [userId], references: [uuid], onDelete: Cascade)
  employee   Employee? @relation("userSettings_employeeIdToemployees", fields: [employeeId], references: [uuid])

  @@map("userSettings")
}

model User {
  uuid                                    String              @id @default(uuid()) @db.Uuid
  tenantId                                String              @db.Uuid
  email                                   String              @unique
  password                                String
  firstName                               String?             @db.VarChar(64)
  lastName                                String?             @db.VarChar(64)
  a0Id                                    String?             @db.VarChar
  validUntil                              DateTime?           @db.Timestamptz(6)
  createdAt                               DateTime            @default(now())
  updatedAt                               DateTime            @updatedAt
  userSettings                            UserSettings[]      @relation("userSettings_userIdTousers")
  contactData                             ContactData[]       @relation("contactData_referenceIdTousers")
  permissions                             UserToPermissions[]

  @@map("users")
}

model UserToPermissions {
  userId       String          @db.Uuid
  user         User            @relation(fields: [userId], references: [uuid])
  permissionId String          @db.Uuid
  permission   PermissionLevel @relation(fields: [permissionId], references: [uuid])
  tenantId     String          @db.Uuid

  @@id([userId, permissionId])
  @@map("userPermissions")
}

model PermissionLevel {
  uuid        String              @id @default(uuid()) @db.Uuid
  displayName String              @db.VarChar(64)
  description String              @db.VarChar(255)
  tenantId    String              @db.Uuid
  users       UserToPermissions[]

  @@map("permissionLevels")
}

model ContactData {
  uuid           String       @id @default(uuid()) @db.Uuid
  userId         String?      @db.Uuid
  employeeId     String?      @db.Uuid
  patientId      String?      @db.Uuid
  doctorId       String?      @db.Uuid
  institutionId  String?      @db.Uuid
  type           String       @db.VarChar(64)
  contact        String       @db.VarChar(255)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  tenantId       String       @db.Uuid
  user           User?        @relation("contactData_referenceIdTousers", fields: [userId], references: [uuid])
  employee       Employee?    @relation("contactData_referenceIdToemployees", fields: [employeeId], references: [uuid])
  patient        Patient?     @relation("contactData_referenceIdTopatient", fields: [patientId], references: [uuid])
  doctor         Doctor?      @relation("contactData_referenceIdToDoctor", fields: [doctorId], references: [uuid])
  institution    Institution? @relation("contactData_referenceIdToInstitution", fields: [institutionId], references: [uuid])

  @@map("contactData")
}

model Patient {
  uuid                String        @id @default(uuid()) @db.Uuid
  firstName           String?       @db.VarChar(64)
  lastName            String?       @db.VarChar(64)
  title               String?       @db.VarChar(64)
  gender              String?       @db.VarChar(10)
  street              String?       @db.VarChar(64)
  zip                 String?       @db.VarChar(10)
  city                String?       @db.VarChar(64)
  birthday            DateTime?     @db.Date
  insurance           String?       @db.VarChar(64)
  insuranceNumber     String?       @db.VarChar(64)
  insuranceCardNumber String?       @db.VarChar(64)
  insuranceCardValid  String?       @db.VarChar(64)
  notices             String?       @db.VarChar(255)
  careFacility        String?       @db.VarChar(64)
  state               String?       @db.VarChar(64)
  appointmentRequest  String?       @db.VarChar(64)
  medicalReport       String?       @db.VarChar(255)
  isAddpayFreed       Boolean
  addPayFreedFrom     DateTime?     @db.Date
  addPayFreedUntil    DateTime?     @db.Date
  validUntil          DateTime?     @db.Date
  firstContactAt      DateTime      @default(now())
  isWaitingSince      DateTime      @default(now())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  companyId           String        @db.Uuid
  tenantId            String        @db.Uuid
  doctorId            String?       @db.Uuid
  institutionId       String?       @db.Uuid
  archived            Boolean       @default(false)
  hasPrescription     Boolean       @default(false)
  hasContract         Boolean       @default(false)
  isWaitingAgain      Boolean       @default(false)
  contactData         ContactData[]  @relation("contactData_referenceIdTopatient")
  events              Event[]        @relation("event_referenceIdTopatient")
  availability        Availability[] @relation("availability_referenceIdToPatient")
  doctor              Doctor?        @relation("doctor_referenceIdToPatient", fields: [doctorId], references: [uuid])
  institution         Institution?   @relation("institution_referenceIdToPatient", fields: [institutionId], references: [uuid])
  @@map("patients")
}

model Doctor {
  uuid                String        @id @default(uuid()) @db.Uuid
  firstName           String?       @db.VarChar(64)
  lastName            String?       @db.VarChar(64)
  title               String?       @db.VarChar(64)
  street              String?       @db.VarChar(64)
  zip                 String?       @db.VarChar(10)
  city                String?       @db.VarChar(64)
  tenantId            String        @db.Uuid
  patients            Patient[]     @relation("doctor_referenceIdToPatient")
  contactData         ContactData[] @relation("contactData_referenceIdToDoctor")
}

model CancellationReason {
  id          String  @id @db.VarChar(10)
  description String  @db.VarChar(64)
  tenantId    String? @db.Uuid
  events      Event[] @relation("event_referenceIdToCancellationReason")
}

model Institution {
  uuid                String        @id @default(uuid()) @db.Uuid
  name                String?       @db.VarChar(64)
  description         String?       @db.VarChar(64)
  street              String?       @db.VarChar(64)
  zip                 String?       @db.VarChar(10)
  city                String?       @db.VarChar(64)
  tenantId            String        @db.Uuid
  archived            Boolean       @default(false)
  patients            Patient[]     @relation("institution_referenceIdToPatient")
  contactData         ContactData[] @relation("contactData_referenceIdToInstitution")
}